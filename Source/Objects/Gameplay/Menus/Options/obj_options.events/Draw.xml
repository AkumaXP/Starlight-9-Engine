<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<event category="DRAW" id="0">
  <actions>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">/// Draw background.
draw_sprite_tiled(sprite_index, image_index, 0, 0);
</argument>
      </arguments>
    </action>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">/// Draw &amp; select options.
draw_set_font(global.font_main);
draw_set_halign(fa_center);
draw_set_color(c_yellow)
draw_text(SCREEN_WIDTH / 2, 16, "----------------#- SETTINGS -");
draw_text(SCREEN_WIDTH / 2, SCREEN_HEIGHT - 32, "----------------#" + string(option_description));
draw_set_color(c_white);

if (map_source == 0)
{
    // Change option.
    if (!option_ended)
    {
        if (keyboard_check_pressed(global.key_down))
        {
            if (option_selected &lt; 11)
            {
                option_selected += 1;
            }
            else
            {
                option_selected = 0;
            }
            audio_play(SFX._general_switch, SFX.sfx_volume, 1, 0, 0);
        }
        if (keyboard_check_pressed(global.key_up))
        {
            if (option_selected &gt; 0)
            {
                option_selected -= 1;
            }
            else
            {
                option_selected = 11;
            }
            audio_play(SFX._general_switch, SFX.sfx_volume, 1, 0, 0);
        }
    }

    // Change screen size.
    if (option_selected == 0)
    {
        option_description = "- Change the Screen Size -";
        draw_set_color(c_yellow);

        if (!option_ended)
        {
            if (keyboard_check_pressed(global.key_left))
            {
                global.screen_scale -= 1;
                if (global.screen_scale &lt; 1) global.screen_scale = 5;
                window_resize(); // Set screen resolution.
                audio_play(SFX._general_switch, SFX.sfx_volume, 1, 0, 0);
            }
            if (keyboard_check_pressed(global.key_right))
            {
                global.screen_scale += 1;
                if (global.screen_scale &gt; 5) global.screen_scale = 1;
                window_resize();
                audio_play(SFX._general_switch, SFX.sfx_volume, 1, 0, 0);
            }
        }
    }
    else
    {
        draw_set_color(c_white);
    }

    // Draw screen size option sub-heading.
    if (!window_get_fullscreen())
    {
        draw_text(SCREEN_WIDTH / 2, 48, "SCREEN SIZE - " + string(global.screen_scale) + "x");
    }
    else
    {
        draw_text(SCREEN_WIDTH / 2, 48, "SCREEN SIZE - FULL");
    }

    // Toggle VSync.
    if (option_selected == 1)
    {
        option_description = "- Toggle Vertical Synchronization -";
        draw_set_color(c_yellow);

        if (!option_ended)
        {
            if (keyboard_check_pressed(global.key_left) || keyboard_check_pressed(global.key_right))
            {
                global.use_vsync = !global.use_vsync;
                set_synchronization(global.use_vsync);
                audio_play(SFX._general_switch, SFX.sfx_volume, 1, 0, 0);
            }
        }
    }
    else
    {
        draw_set_color(c_white);
    }

    // Draw VSync option sub-heading.
    if (global.use_vsync)
    {
        draw_text(SCREEN_WIDTH / 2, 64, "VSYNC - ON");
    }
    else
    {
        draw_text(SCREEN_WIDTH / 2, 64, "VSYNC - OFF");
    }

    // Manage input delay for audio volumes.
    var input_dir;
    input_dir = keyboard_check(global.key_right) - keyboard_check(global.key_left);
    if (input_dir != 0)
    {
        volume_delay += input_dir;
        if (abs(volume_delay) &gt; 5) volume_delay = 0;
    }
    if (sign(volume_delay) != input_dir)
    {
        volume_delay = 0;
    }

    // Change music volume.
    if (option_selected == 2)
    {
        option_description = "- Change the Volume of Background Music -";
        draw_set_color(c_yellow);

        if (abs(volume_delay) &gt;= 5 &amp;&amp; !option_ended)
        {
            SFX.bgm_volume = clamp(SFX.bgm_volume + sign(volume_delay) * 0.01, 0, 1);
            audio_play(SFX._general_switch, SFX.sfx_volume, 1, 0, 0);
        }
    }
    else
    {
        draw_set_color(c_white);
    }

    // Draw music volume option sub-heading.
    draw_text(SCREEN_WIDTH / 2, 80, "BGM VOLUME - " + string(round(SFX.bgm_volume * 100)) + "%");

    // Change sound volume.
    if (option_selected == 3)
    {
        option_description = "- Change the Volume of Sound Effects -";
        draw_set_color(c_yellow);

        if (abs(volume_delay) &gt;= 5 &amp;&amp; !option_ended)
        {
            SFX.sfx_volume = clamp(SFX.sfx_volume + sign(volume_delay) * 0.01, 0, 1);
            audio_play(SFX._general_switch, SFX.sfx_volume, 1, 0, 0);
        }
    }
    else
    {
        draw_set_color(c_white);
    }

    // Draw sound volume option sub-heading.
    draw_text(SCREEN_WIDTH / 2, 96, "SFX VOLUME - " + string(round(SFX.sfx_volume * 100)) + "%");

    // Change keyboard bindings.
    if (option_selected == 4)
    {
        option_description = "- Change the Keyboard bindings -";
        draw_set_color(c_yellow);

        if (keyboard_check_pressed(global.key_action) &amp;&amp; !option_ended)
        {
            map_delay  = 15;
            map_source = 1;
        }
    }
    else
    {
        draw_set_color(c_white);
    }

    // Draw keyboard binding option sub-heading.
    draw_text(SCREEN_WIDTH / 2, 112, "KEYBOARD BINDINGS");

    // Change gamepad bindings.
    if (option_selected == 5)
    {
        if (!audio_is_playing(SFX._general_error))
        {
            option_description = "- Change the Gamepad bindings -";
        }
        else
        {
            option_description = "- Error: Gamepad not detected! -";
        }

        if (ctrl_gamepad.gmp_exists)
        {
            draw_set_color(c_yellow);
            if (keyboard_check_pressed(global.key_action) &amp;&amp; !option_ended)
            {
                map_delay  = 15;
                map_source = 2;
            }
        }
        else
        {
            draw_set_color(c_red);
            if (keyboard_check_pressed(global.key_action) &amp;&amp; !option_ended)
            {
                audio_play(SFX._general_error, SFX.sfx_volume, 1, 0, 0);
            }
        }
    }
    else
    {
        draw_set_color(c_white);
    }

    // Draw gamepad binding option sub-heading.
    draw_text(SCREEN_WIDTH / 2, 128, "GAMEPAD BINDINGS");

    // Toggle smooth rotation.
    if (option_selected == 6)
    {
        option_description = "- Change the Player's Visual Rotation -";
        draw_set_color(c_yellow);

        if (!option_ended)
        {
            if (keyboard_check_pressed(global.key_left) || keyboard_check_pressed(global.key_right))
            {
                global.smooth_rotation = !global.smooth_rotation;
                audio_play(SFX._general_switch, SFX.sfx_volume, 1, 0, 0);
            }
        }
    }
    else
    {
        draw_set_color(c_white);
    }

    // Draw rotation style option sub-heading.
    if (!global.smooth_rotation)
    {
        draw_text(SCREEN_WIDTH / 2, 144, "VISUAL ROTATION - CLASSIC");
    }
    else
    {
        draw_text(SCREEN_WIDTH / 2, 144, "VISUAL ROTATION - SMOOTH");
    }

    // Toggle trail.
    if (option_selected == 7)
    {
        option_description = "- Toggle the use of the Player's Trail Effect -";
        draw_set_color(c_yellow);

        if (!option_ended)
        {
            if (keyboard_check_pressed(global.key_left) || keyboard_check_pressed(global.key_right))
            {
                global.use_trail = !global.use_trail;
                audio_play(SFX._general_switch, SFX.sfx_volume, 1, 0, 0);
            }
        }
    }
    else
    {
        draw_set_color(c_white);
    }

    // Draw trail toggle option sub-heading.
    if (global.use_trail)
    {
        draw_text(SCREEN_WIDTH / 2, 160, "TRAIL EFFECT - ON");
    }
    else
    {
        draw_text(SCREEN_WIDTH / 2, 160, "TRAIL EFFECT - OFF");
    }

    // Toggle the Time Over event.
    if (option_selected == 8)
    {
        option_description = "- Trigger the Time Over event when 10 minutes have passed -";
        draw_set_color(c_yellow);

        if (!option_ended)
        {
            if (keyboard_check_pressed(global.key_left) || keyboard_check_pressed(global.key_right))
            {
                global.limit_time = !global.limit_time;
                audio_play(SFX._general_switch, SFX.sfx_volume, 1, 0, 0);
            }
        }
    }
    else
    {
        draw_set_color(c_white);
    }

    // Draw Time Over option sub-heading.
    if (global.limit_time)
    {
        draw_text(SCREEN_WIDTH / 2, 176, "TIME OVER - ON");
    }
    else
    {
        draw_text(SCREEN_WIDTH / 2, 176, "TIME OVER - OFF");
    }

    // Toggle the visibility of the HUD.
    if (option_selected == 9)
    {
        option_description = "- Toggle the HUD in Levels -";
        draw_set_color(c_yellow);

        if (!option_ended)
        {
            if (keyboard_check_pressed(global.key_left) || keyboard_check_pressed(global.key_right))
            {
                global.display_hud = !global.display_hud;
                audio_play(SFX._general_switch, SFX.sfx_volume, 1, 0, 0);
            }
        }
    }
    else
    {
        draw_set_color(c_white);
    }

    // Draw HUD visibility option sub-heading.
    if (global.display_hud)
    {
        draw_text(SCREEN_WIDTH / 2, 192, "HUD - VISIBLE");
    }
    else
    {
        draw_text(SCREEN_WIDTH / 2, 192, "HUD - HIDDEN");
    }

    // Toggle the player's level completion style.
    if (option_selected == 10)
    {
        option_description = "- Change the Player's Level Completion Style -";
        draw_set_color(c_yellow);
        
        if (!option_ended)
        {
            if (keyboard_check_pressed(global.key_left))
            {
                global.goal_style = max(global.goal_style - 1, 0);
                audio_play(SFX._general_switch, SFX.sfx_volume, 1, 0, 0);
            }
            if (keyboard_check_pressed(global.key_right))
            {
                global.goal_style = min(global.goal_style + 1, 2);
                audio_play(SFX._general_switch, SFX.sfx_volume, 1, 0, 0);
            }
        }
    }
    else
    {
        draw_set_color(c_white);
    }

    // Draw HUD visibility option sub-heading.
    switch (global.goal_style)
    {
        case 0:
        {
            draw_text(SCREEN_WIDTH / 2, 208, "LEVEL COMPLETION - NONE");
            break;
        }
        case 1:
        {
            draw_text(SCREEN_WIDTH / 2, 208, "LEVEL COMPLETION - SONIC 1/2");
            break;
        }
        case 2:
        {
            draw_text(SCREEN_WIDTH / 2, 208, "LEVEL COMPLETION - SONIC 3");
            break;
        }
    }

    // Title screen option.
    if (option_selected == 11)
    {
        option_description = "- Return to the Title Screen -";
        draw_set_color(c_yellow);
        
        if (keyboard_check_pressed(global.key_action) &amp;&amp; !option_ended)
        {
            option_ended = true;
            config_save();
            room_fade_to(rm_title);
        }
    }
    else
    {
        draw_set_color(c_white);
    }

    // Draw title screen option sub-heading.
    draw_text(SCREEN_WIDTH / 2, SCREEN_HEIGHT - 48, "EXIT");
}
else
{
    draw_text(SCREEN_WIDTH / 2, SCREEN_HEIGHT / 2, "PRESS ANY KEY FOR: " + string(map_string));
}

// Reset drawing properties.
draw_set_color(c_white);
draw_set_halign(fa_left);
</argument>
      </arguments>
    </action>
  </actions>
</event>
