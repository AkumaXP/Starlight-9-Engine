<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<event category="STEP" id="0">
  <actions>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">/// Input mapping.

// Keyboard:
if (map_source == 1)
{
    // Abort once all keys have been mapped.
    if (map_order == 9)
    {
        map_source = 0;
        map_order  = 1;
        map_delay  = 15;
    }

    // Get the names of each key we're mapping.
    switch (map_order)
    {
        case 1: map_string = "UP";      break;
        case 2: map_string = "DOWN";    break;
        case 3: map_string = "LEFT";    break;
        case 4: map_string = "RIGHT";   break;
        case 5: map_string = "ACTION";  break;
        case 6: map_string = "SPECIAL"; break;
        case 7: map_string = "SWAP";    break;
        case 8: map_string = "START";   break;
    }

    if (map_delay == 0)
    {
        // Check for a valid key.
        var key;
        key = keyboard_key;
        if (key &gt; 0)
        {
            // Map each key.
            switch (map_order)
            {
                case 1:
                {
                    global.key_up = key;
                    keyboard_clear(vk_anykey);
                    map_delay = 15;
                    map_order = 2;
                    break;
                }
                case 2:
                {
                    global.key_down = key;
                    keyboard_clear(vk_anykey);
                    map_delay = 15;
                    map_order = 3;
                    break;
                }
                case 3:
                {
                    global.key_left = key;
                    keyboard_clear(vk_anykey);
                    map_delay = 15;
                    map_order = 4;
                    break;
                }
                case 4:
                {
                    global.key_right = key;
                    keyboard_clear(vk_anykey);
                    map_delay = 15;
                    map_order = 5;
                    break;
                }
                case 5:
                {
                    global.key_action = key;
                    keyboard_clear(vk_anykey);
                    map_delay = 15;
                    map_order = 6;
                    break;
                }
                case 6:
                {
                    global.key_special = key;
                    keyboard_clear(vk_anykey);
                    map_delay = 15;
                    map_order = 7;
                    break;
                }
                case 7:
                {
                    global.key_swap = key;
                    keyboard_clear(vk_anykey);
                    map_delay = 15;
                    map_order = 8;
                    break;
                }
                case 8:
                {
                    global.key_start = key;
                    keyboard_clear(vk_anykey);
                    map_delay = 15;
                    map_order = 9;
                    break;
                }
            }
        }
    }
}

// Gamepad:
if (map_source == 2)
{
    // Abort once all buttons have been mapped.
    if (map_order == 5)
    {
        map_source = 0;
        map_order  = 1;
        map_delay  = 15;
    }

    // Get the names of each button we're mapping.
    switch (map_order)
    {
        case 1: map_string = "ACTION";  break;
        case 2: map_string = "SPECIAL"; break;
        case 3: map_string = "SWAP";    break;
        case 4: map_string = "START";   break;
    }

    if (map_delay == 0)
    {
        // Check for a valid gamepad button.
        var button;
        button = joystick_get_button();
        if (button &gt; -1)
        {
            // Map each button.
            switch (map_order)
            {
                case 1:
                {
                    global.gmp_action = button;
                    map_delay         = 15;
                    map_order         = 2;
                    break;
                }
                case 2:
                {
                    global.gmp_special = button;
                    map_delay          = 15;
                    map_order          = 3;
                    break;
                }
                case 3:
                {
                    global.gmp_swap = button;
                    map_delay       = 15;
                    map_order       = 4;
                    break;
                }
                case 4:
                {
                    global.gmp_start = button;
                    map_delay        = 15;
                    map_order        = 5;
                    break;
                }
            }
        }
    }
}

// Reduce mapping delay.
if (map_delay &gt; 0) map_delay -= 1;
</argument>
      </arguments>
    </action>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">/// Animate.
// Credit to Tpot &amp; VectorSatyr.
if (image_timer &gt; 0 &amp;&amp; image_speed == 0)
{
    image_timer -= 1;
    if (image_timer &lt;= 0)
    {
        if (image_index &gt;= 3)
        {
            image_speed = -0.15;
        }
        else if (image_index &lt;= 0)
        {
            image_speed = 0.15;
        }
    }
}

if (image_index &lt;= 0 &amp;&amp; image_speed &lt; 0)
{
    image_timer = 200;
    image_speed = 0;
}
else if (image_index &gt;= 3 &amp;&amp; image_speed &gt; 0)
{
    image_timer = 200;
    image_speed = 0;
}
</argument>
      </arguments>
    </action>
  </actions>
</event>
