<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<event category="STEP" id="2">
  <actions>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">/// Movement.
if (in_view(id))
{
    // Horizontal movement:
    if (place_meeting(x + sign(x_speed), y, par_terrain) &amp;&amp; !place_meeting(x + sign(x_speed), y - 1, par_terrain))
    {
        y -= 1;
    }
    if (place_meeting(x + sign(x_speed), y + 2, par_terrain) &amp;&amp; !place_meeting(x + sign(x_speed), y + 1, par_terrain))
    {
        y += 1;
    }

    if (!place_meeting(x + sign(x_speed), y, par_terrain) &amp;&amp; !place_meeting(x + sign(x_speed), y, obj_badnik_block))
    {
        if (shoot_timer[1] &gt; 0)
        {
            x += x_speed;

            // Animate.
            image_speed = 0.125;
            if (floor(image_index) &gt;= 4)
            {
                image_index = 0;
            }
        }
    }
    else
    {
        // Change direction.
        if (shoot_timer[1] &gt; 0)
        {
            shoot_timer[1] = 0;
            x_speed       *= -1;
            image_xscale  *= -1;
        }
    }

    // Timers to shoot projectiles.
    if (shoot_timer[1] &gt; 0)
    {
        shoot_timer[1] -= 1;
    }
    else
    {
        if (shoot_timer[2] &gt; 0)
        {
            shoot_timer[2] -= 1;
            if (image_speed != 0)
            {
                image_speed  = 0;
                image_index  = 3;
            }
        }
        else
        {
            // Fire projectiles.
            if (!shoot_flag)
            {
                shoot_flag  = true;
                image_index = 4;
                audio_play(SFX._general_projectile, SFX.sfx_volume, 1, 0, 0);
                with (instance_create(x - 16, y - 2, obj_projectile_crabmeat))
                {
                    hspeed      = -1;
                    vspeed      = -4;
                    gravity     = 0.21875;
                    image_speed = 0.25;
                }
                with (instance_create(x + 16, y - 2, obj_projectile_crabmeat))
                {
                    hspeed      =  1;
                    vspeed      = -4;
                    gravity     = 0.21875;
                    image_speed = 0.25;
                }
            }

            if (shoot_timer[3] &gt; 0)
            {
                shoot_timer[3] -= 1;
            }
            else
            {
                // Reset variables.
                shoot_timer[1] = 128;
                shoot_timer[2] = 90;
                shoot_timer[3] = 60;
                shoot_flag     = false;
            }
        }
    }

    // Vertical movement:
    repeat (abs(y_speed))
    {
        if (place_meeting(x, y + sign(y_speed), par_solid) || (y_speed &gt;= 0 &amp;&amp; place_meeting(x, y + sign(y_speed), par_platform) &amp;&amp; !place_meeting(x, y, par_platform)))
        {
            y_speed = 0;
        }
        else
        {
            y += sign(y_speed);
        }
    }

    if (!ground)
    {
        y_speed = min(y_speed + 0.21875, 12);
    }
}
else
{
    // Reset variables when outside the view.
    shoot_timer[1] = 128;
    shoot_timer[2] = 90;
    shoot_timer[3] = 60;
    shoot_flag     = false;
}
</argument>
      </arguments>
    </action>
  </actions>
</event>
