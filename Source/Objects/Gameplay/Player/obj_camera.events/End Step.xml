<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<event category="STEP" id="2">
  <actions>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">/// Camera shifting.
if (cam_handle == global.player_id[0])
{
    // Get shifting direction:
    var shift_dir;
    shift_dir = (cam_handle.state == STATE_CROUCH) - (cam_handle.state == STATE_LOOKUP);

    // Increment look timer:
    if (shift_dir != 0)
    {
        cam_look_timer = clamp(cam_look_timer + shift_dir, -120, 120);
    }

    // Reset look timer:
    if (sign(cam_look_timer) != shift_dir)
    {
        cam_look_timer = 0;
    }

    // Shift the camera up.
    if (cam_look_timer &lt;= -120)
    {
        cam_y_shift = max(cam_y_shift - 2, -104);
    }
    else if (cam_look_timer &gt;= 120) // Shift the camera down.
    {
        cam_y_shift = min(cam_y_shift + 2, 88);
    }
    else if (cam_y_shift != 0) // Shift the camera back to the center.
    {
        cam_y_shift = max(abs(cam_y_shift) - 2, 0) * sign(cam_y_shift);
    }

    // Shift the camera horizontally if the player is using the peelout move.
    if ((cam_handle.state == STATE_PEELOUT &amp;&amp; cam_handle.peelout_timer &gt; 15) || cam_handle.peelout_flag)
    {
        cam_x_shift = min(abs(cam_x_shift) + 2, 64) * cam_handle.animation_direction;
    }
    else if (cam_x_shift != 0)
    {
        cam_x_shift = max(abs(cam_x_shift) - 2, 0) * sign(cam_x_shift);
    }
}
else if (cam_handle != noone)
{
    // Shift the camera back to the center if it isn't focusing on the player.
    cam_x_shift = max(abs(cam_x_shift) - 2, 0) * sign(cam_x_shift);
    cam_y_shift = max(abs(cam_y_shift) - 2, 0) * sign(cam_y_shift);
}
</argument>
      </arguments>
    </action>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">/// Camera movement.
var border_left, border_right, border_top, border_bottom, view_xhalf, view_yhalf;

// Update borders.
border_left   = cam_x - 8;
border_right  = cam_x + 8;
border_top    = cam_y - 32;
border_bottom = cam_y + 32;

// Player camera handling:
if (cam_handle == global.player_id[0])
{
    // Move the camera horizontally.
    if (alarm[0] == -1)
    {
        if (cam_handle.x &lt; border_left)
        {
            cam_x -= min(border_left - cam_handle.x, 16);
        }
        else if (cam_handle.x &gt; border_right)
        {
            cam_x += min(cam_handle.x - border_right, 16);
        }
    }

    // Move the camera vertically.
    if (cam_handle.state != STATE_DEATH)
    {
        // While airborne:
        if (!cam_handle.ground)
        {
            if (cam_handle.y &lt; border_top)
            {
                cam_y -= min(border_top - cam_handle.y, 16);
            }
            else if (cam_handle.y &gt; border_bottom)
            {
                cam_y += min(cam_handle.y - border_bottom, 16);
            }
        }
        else // While grounded.
        {
            if (cam_handle.y != cam_y)
            {
                if (abs(cam_handle.y - cam_handle.yprevious) &lt;= 6)
                {
                    cam_y += clamp(cam_handle.y - cam_y, -6, 6);
                }
                else
                {
                    cam_y += clamp(cam_handle.y - cam_y, -16, 16);
                }
            }
        }
    }
}
else if (cam_handle != noone) // General camera handling.
{
    // Move the camera horizontally.
    if (cam_handle.x != cam_x)
    {
        cam_x += clamp(cam_handle.x - cam_x, -6, 6);
    }

    // Move the camera vertically.
    if (cam_handle.y != cam_y)
    {
        cam_y += clamp(cam_handle.y - cam_y, -6, 6);
    }
}

// Limit the camera position.
view_xhalf = SCREEN_WIDTH  / 2;
view_yhalf = SCREEN_HEIGHT / 2;
x = clamp(x, bound_left + view_xhalf, bound_right - view_xhalf);
y = clamp(y, bound_top + view_yhalf, bound_bottom - view_yhalf);

// Set position; floor the camera values to prevent jittering.
x = floor(cam_x + cam_x_shift);
y = floor(cam_y + cam_y_shift);
</argument>
      </arguments>
    </action>
  </actions>
</event>
