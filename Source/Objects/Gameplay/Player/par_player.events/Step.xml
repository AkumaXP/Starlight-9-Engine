<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<event category="STEP" id="0">
  <actions>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">/// Death &amp; Respawn.
if (state == STATE_DEATH &amp;&amp; death_timer != -1)
{
    if (death_timer == -5)
    {
        // Throw the player into the air.
        if (!has_drowned) y_speed = -7;
        death_timer =  120;
        depth       = -999995;

        // Stop any special abilities.
        if (dropdash_state != 0)
        {
            dropdash_state = 0;
            dropdash_timer = 20;
            if (audio_is_playing(SFX._player_dropdash))
            {
                audio_stop(SFX._player_dropdash);
            }
        }
        if (amy_hammer_attack != 0)
        {
            amy_hammer_attack  = 0;
        }
        if (boosting)
        {
            boosting = false;
        }

        if (!cpu_flag)
        {
            // Disable game time.
            STG.add_time = false;

            // Fade out the audio.
            SFX.fadeout_flag = true;

            // Decrease lives.
            global.player_lives -= 1;
        }

        // Play death/drown sound.
        if (!has_drowned)
        {
            audio_play(SFX._player_hurt, SFX.sfx_volume, 1, 0, 0);
        }
        else
        {
            audio_play(SFX._player_drown, SFX.sfx_volume, 1, 0, 0);
        }

        // Stop flight sounds.
        if (audio_is_playing(SFX._player_fly))
        {
            audio_stop(SFX._player_fly);
        }
        if (audio_is_playing(SFX._player_fly_drop))
        {
            audio_stop(SFX._player_fly_drop);
        }
    }

    // Add Gravity:
    if (!has_drowned)
    {
        y_speed += 0.21875;
    }
    else
    {
        y_speed += 0.0625;
    }
    y += y_speed;

    // Drowning bubbles.
    if (has_drowned)
    {
        var bubble;
        if (breath_timer &gt; 0)
        {
            breath_timer -= 1;
            if (random(4) &gt;= 2)
            {
                bubble              = instance_create(x + irandom_range(-7, 8), y - 6, obj_water_air_bubble);
                bubble.bubble_index = choose(0, 1, 2, 1, 3);
                bubble.depth        = -999996;
            }
        }
    }

    // Decrease death timer.
    if (death_timer &gt; 0)
    {
        death_timer -= 1;
    }
    else if (death_timer == 0)
    {
        if (!cpu_flag)
        {
            death_timer = -1;

            // If we have more than 0 lives, restart the room, otherwise, trigger a game over.
            if (global.player_lives &gt; 0)
            {
                // Check for a time over:
                if (global.limit_time &amp;&amp; STG.game_time &gt;= 599999)
                {
                    instance_create(0, 0, obj_time_over);
                }
                else
                {
                    room_fade_to(room);
                }
            }
            else
            {
                global.previous_room = room;
                instance_create(0, 0, obj_game_over);

                // Reset checkpoint variables:
                global.checkpoint_x = -1;
                global.checkpoint_y = -1;
                global.checkpoint_t =  0;
            }
        }
        else
        {
            player_state_respawn(true);
            death_timer = -5;

            // Destroy any shields:
            if (shield_index != 0)
            {
                with (shield_object) instance_destroy();
            }
        }
    }
}

if (state != STATE_RESPAWN &amp;&amp; state != STATE_DEATH)
{
    // Die from heights.
    if (STG.zone_death_height != -1)
    {
        if (y &gt;= STG.zone_death_height)
        {
            state = STATE_DEATH;
        }
    }
}

// Respawning:
player_state_respawn(false);
</argument>
      </arguments>
    </action>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">/// Terrain &amp; Instance Interaction.

// Exit in the following states:
if (state == STATE_DEATH || state == STATE_RESPAWN) exit;

// Reset the platform check if no longer colliding with a platform.
if (!place_meeting(x, y, par_platform) &amp;&amp; platform_check)
{
    platform_check = false;
}

// Handle collision with moving platforms.
// This needs to be done before movement to properly work.
player_handle_platforms();

// Limit horizontal speed if applicable:
if (x_speed_limit)
{
    x_speed = clamp(x_speed, -x_speed_max, x_speed_max);
}

// Calculate horizontal steps &amp; samples:
var x_steps, x_samples;
x_steps   = 1 + floor(abs(x_speed) / 13); // 13 is the horizontal radius of the "main" mask.
x_samples = x_speed / x_steps;

repeat (x_steps)
{
    // Move horizontally:
    x += dcos(angle) * x_samples;
    y -= dsin(angle) * x_samples;

    // Eject from terrain if stuck:
    while (x_samples &gt; 0 &amp;&amp; player_collision_check(COL_RIGHT, MASK_MID, x, y, angle))
    {
        x -= dcos(angle);
        y += dsin(angle);
    }
    while (x_samples &lt; 0 &amp;&amp; player_collision_check(COL_LEFT, MASK_MID, x, y, angle))
    {
        x += dcos(angle);
        y -= dsin(angle);
    }

    // Handle NPC interactions:
    player_handle_list();

    // Terrain/slope collision:
    if (ground)
    {
        while (player_collision_check(COL_MAIN, MASK_MAIN, x, y))
        {
            x -= dsin(angle);
            y -= dcos(angle);
        }
        if (player_collision_check(COL_SLOPE, MASK_MID, x, y, angle))
        {
            while (!player_collision_check(COL_MAIN, MASK_MAIN, x, y))
            {
                x += dsin(angle);
                y += dcos(angle);
            }
        }

        // Get new angles:
        if (col_rotate_flag)
        {
            if ((!col_edge_skip &amp;&amp; player_collision_check(COL_LEFT_EDGE, x, y, angle) &amp;&amp; player_collision_check(COL_RIGHT_EDGE, x, y, angle)) || col_edge_skip)
            {
                if (col_edge_exception)
                {
                    var angle_temp;
                    angle_temp = player_get_angle(x, y, angle_relative);
                    if ((angle_temp &gt;= 60 &amp;&amp; angle_temp &lt;= 90) || (angle_temp &gt;= 240 &amp;&amp; angle_temp &lt;= 300))
                    {
                        if (!player_collision_check(COL_EDGE_LINE))
                        {
                            ground = false;
                            break;
                        }
                        else player_set_angle(angle_temp);
                    }
                }
                else player_set_angle(player_get_angle(x, y, angle));
            }
        }
        else player_set_angle(global.gravity_angle);
    }

    // Handle NPC interactions:
    player_handle_list();
}

if (!ground)
{
    // Limit vertical speed if applicable:
    if (y_speed_limit)
    {
        y_speed = clamp(y_speed, -y_speed_max, y_speed_max);
    }

    // Calculate vertical steps &amp; samples:
    var y_steps, y_samples;
    y_steps   = 1 + floor(abs(y_speed) / 13); // 13 is the vertical radius of the "main" mask.
    y_samples = y_speed / y_steps;

    repeat (y_steps)
    {
        // Move vertically:
        x += dsin(angle) * y_samples;
        y += dcos(angle) * y_samples;

        // Eject from terrain if stuck:
        while (y_samples &lt; 0 &amp;&amp; player_collision_check(COL_TOP, MASK_MID, x, y, global.gravity_angle))
        {
            x += dsin(angle);
            y += dcos(angle);
        }
        while (y_samples &gt; 0 &amp;&amp; player_collision_check(COL_BOTTOM, MASK_MID, x, y, global.gravity_angle))
        {
            x -= dsin(angle);
            y -= dcos(angle);
        }

        // Handle NPC interactions:
        player_handle_list();

        // Check for landing:
        if (y_speed &gt;= 0 &amp;&amp; player_collision_check(COL_BOTTOM, MASK_BIG, x, y, global.gravity_angle))
        {
            // Calculate and set angles:
            if (col_rotate_flag)
            {
                if ((!col_edge_skip &amp;&amp; player_collision_check(COL_LEFT_EDGE, x, y, global.gravity_angle) &amp;&amp; player_collision_check(COL_RIGHT_EDGE, x, y, global.gravity_angle)) || col_edge_skip)
                {
                    player_set_angle(player_get_angle(x, y, angle));
                }
                else
                {
                    player_set_angle(global.gravity_angle);
                }
            }
            else
            {
                player_set_angle(global.gravity_angle);
            }

            // Change horizontal speed upon landing on uneven terrain:
            if (abs(x_speed) &lt;= abs(y_speed) &amp;&amp; angle_relative &gt;= 22.5 &amp;&amp; angle_relative &lt;= 337.5)
            {
                x_speed = y_speed * -sign(dsin(angle_relative));
                if (angle_relative &lt; 45 || angle_relative &gt; 315)
                {
                    x_speed *= 0.5;
                }
            }

            // Set ground flag:
            ground = true;
        }

        // Check for a ceiling:
        if (y_speed &lt; 0 &amp;&amp; player_collision_check(COL_TOP, MASK_LARGE, x, y, global.gravity_angle) &amp;&amp; !player_collision_check(COL_TOP_OBJECT, MASK_LARGE, x, y, global.gravity_angle, par_obstacle) &amp;&amp; col_ceiling_movement)
        {
            // Set angles:
            player_set_angle(180);

            // Check if it's possible to attach to the ceiling:
            if (player_collision_check(COL_LEFT_EDGE, x, y, angle_relative) &amp;&amp; player_collision_check(COL_RIGHT_EDGE, x, y, angle_relative))
            {
                // Calculate and set new angles:
                player_set_angle(player_get_angle(x, y, angle_relative));
                
                // Check if the ceiling is steep enough to grab on to:
                if (angle_relative &lt; 135 || angle_relative &gt; 225)
                {
                    // Set horizontal speed and grab onto the ceiling:
                    x_speed = y_speed * -sign(dsin(angle_relative));
                    ground  = true;
                }
                else // Otherwise, detach from the ceiling.
                {
                    player_set_angle(global.gravity_angle);
                    y_speed = 0;
                }
            }
            else // Otherwise, reset angle and vertical speed.
            {
                player_set_angle(global.gravity_angle);
                y_speed = 0;
            }
        }

        // Perform another wall ejection to fix any more bugs that might occur:
        while (player_collision_check(COL_RIGHT, MASK_MID, x, y, angle))
        {
            x -= dcos(angle);
            y += dsin(angle);
        }
        while (player_collision_check(COL_LEFT, MASK_MID, x, y, angle))
        {
            x += dcos(angle);
            y -= dsin(angle);
        }

        // Perform terrain/slope collision again to fix any landing bugs:
        if (player_collision_check(COL_BOTTOM, MASK_BIG, x, y, angle))
        {
            while (player_collision_check(COL_MAIN, MASK_MAIN, x, y))
            {
                x -= dsin(angle);
                y -= dcos(angle);
            }
            if (player_collision_check(COL_SLOPE, MASK_MID, x, y, angle))
            {
                while (!player_collision_check(COL_MAIN, MASK_MAIN, x, y))
                {
                    x += dsin(angle);
                    y += dcos(angle);
                }
            }
        }

        // Handle NPC interactions:
        player_handle_list();
    }
}

// Fall/launch off the tile if the edge sensors are no longer detecting a collision:
repeat (x_steps)
{
    if (ground &amp;&amp; angle != global.gravity_angle)
    {
        if ((x_speed &lt;= 0 &amp;&amp; !player_collision_check(COL_LEFT_EDGE, x, y, angle)) || (x_speed &gt;= 0 &amp;&amp; !player_collision_check(COL_RIGHT_EDGE, x, y, angle)))
        {
            if (col_launch_flag)
            {
                // Check for the necessary flags to launch off the colliding tile:
                if (col_launch_angle &gt; -1 &amp;&amp; col_launch_direction != 0 &amp;&amp; sign(x_speed) == col_launch_direction)
                {
                    // Disable wall collisions to properly launch:
                    disable_wallstop = true;
                    if (alarm[0] == -1)
                    {
                        alarm[0] = 15;
                    }

                    // Set new angles:
                    player_set_angle(sign(x_speed) * col_launch_angle);

                    // Set speeds:
                    y_speed = -dsin(angle_relative) * x_speed;
                    x_speed =  dcos(angle_relative) * x_speed;
                    ground  =  false;
                }
                else // Otherwise, fall off.
                {
                    y_speed = -(dsin(angle_relative) * x_speed);
                    x_speed =   dcos(angle_relative) * x_speed;
                    ground  =   false;
                }
            }
        }
    }
}
</argument>
      </arguments>
    </action>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">/// Horizontal Movement.

// Exit in the following states:
if (state == STATE_DEATH || state == STATE_RESPAWN || !x_allow) exit;

// Apply slope friction:
if (state != STATE_SLIDE &amp;&amp; ground)
{
    // Check if we're not moving along a ceiling:
    if (angle_relative &lt; 135 || angle_relative &gt; 225)
    {
        if (state != STATE_ROLL)
        {
            if (angle_relative &gt;= 22.5 &amp;&amp; angle_relative &lt;= 337.5 &amp;&amp; (x_speed != 0 || input_lock_timer != 0))
            {
                x_speed -= dsin(angle_relative) * 0.125;
            }
        }
        else
        {
            // Rolling up a slope:
            if (sign(x_speed) == sign(dsin(angle_relative)))
            {
                x_speed -= dsin(angle_relative) * roll_fric_up;
            }
            else // Rolling down a slope.
            {
                x_speed -= dsin(angle_relative) * roll_fric_down;
            }
        }
    }
}

// Handle acceleration/deceleration (credit to VectorSatyr).
if (state == STATE_DEFAULT || state == STATE_BALANCE || (state == STATE_JUMP &amp;&amp; !jump_lock) || state == STATE_BRAKE || state == STATE_FLY || state == STATE_SPRING || state == STATE_CORKSCREW || state == STATE_CORKSCREW_ROLL || state == STATE_GLIDE_DROP)
{
    // Store input direction:
    var input_dir;
    input_dir = input_right - input_left;

    // Ground acceleration:
    if (ground)
    {
        if (input_dir != 0)
        {
            if (input_lock_timer == 0)
            {
                // Decelerate:
                if (x_speed != 0 &amp;&amp; sign(x_speed) != input_dir)
                {
                    x_speed += x_deceleration * input_dir;
                    if (sign(x_speed) == input_dir)
                    {
                        x_speed = x_deceleration * input_dir;
                    }
                }
                else // Accelerate.
                {
                    if (abs(x_speed) &lt; x_speed_top)
                    {
                        x_speed += x_acceleration * input_dir;
                        if (abs(x_speed) &gt; x_speed_top)
                        {
                            x_speed = x_speed_top * input_dir;
                        }
                    }
                }
            }
        }
        else
        {
            // Friction:
            x_speed -= min(abs(x_speed), x_acceleration) * sign(x_speed);
        }
    }
    else // Air acceleration.
    {
        if (input_dir != 0)
        {
            if (abs(x_speed) &lt; x_speed_top || sign(x_speed) != input_dir)
            {
                x_speed += 2 * x_acceleration * input_dir;
                if (abs(x_speed) &gt; x_speed_top &amp;&amp; sign(x_speed) == input_dir)
                {
                    x_speed = x_speed_top * input_dir;
                }
            }
        }

        // Apply air resistance:
        if (y_speed &lt; 0 &amp;&amp; y_speed &gt; -4)
        {
            if (abs(x_speed) &gt; 0.125) x_speed *= 0.96875;
        }
    }
}

// Fall off the tile/slip if there's not enough horizontal speed to keep moving:
if (angle_relative &gt;= 45 &amp;&amp; angle_relative &lt;= 315 &amp;&amp; ground &amp;&amp; abs(x_speed) &lt; 2.5 &amp;&amp; !tunnel_lock)
{
    if (angle_relative &gt;= 90 &amp;&amp; angle_relative &lt;= 270)
    {
        y_speed = -dsin(angle_relative) * x_speed;
        x_speed =  dcos(angle_relative) * x_speed;
        ground  =  false;
    }
    else
    {
        input_lock_timer = 30;
    }
}

// Get new angles:
if (ground &amp;&amp; player_collision_check(COL_LEFT_EDGE, x, y, angle) &amp;&amp; player_collision_check(COL_RIGHT_EDGE, x, y, angle))
{
    player_set_angle(player_get_angle(x, y, angle));
}
else
{
    player_set_angle(global.gravity_angle);
}

// Come to a stop when colliding with a wall:
if (!disable_wallstop)
{
    if ((x_speed &gt;= 0 &amp;&amp; player_collision_check(COL_RIGHT, MASK_BIG, x, y, angle)) || (x_speed &lt;= 0 &amp;&amp; player_collision_check(COL_LEFT, MASK_BIG, x, y, angle)))
    {
        x_speed = 0;
    }
}
</argument>
      </arguments>
    </action>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">/// Vertical Movement.

// Exit in the following states:
if (state == STATE_DEATH || state == STATE_RESPAWN || !y_allow) exit;

if (ground)
{
    // Return to the normal state.
    if (y_speed != 0) y_speed = 0;

    if ((state == STATE_JUMP &amp;&amp; dropdash_state &lt; 2) || state == STATE_FLY || state == STATE_HURT || state == STATE_SPRING || state == STATE_CARRY)
    {
        // Reset horizontal speed if hurt:
        if (state == STATE_HURT)
        {
            x_speed = 0;
        }

        // Reset gravity after flying.
        if (state == STATE_FLY)
        {
            y_acceleration = 0.21875;
        }
        state = STATE_DEFAULT;
    }

    // Check if there's no longer any floor below the player:
    if (!player_collision_check(COL_BOTTOM, MASK_BIG, x, y, angle))
    {
        ground = false;
        player_set_angle(global.gravity_angle);
    }
}
else
{
    // Add gravity:
    if (state != STATE_GLIDE &amp;&amp; state != STATE_CLIMB &amp;&amp; state != STATE_CORKSCREW &amp;&amp; state != STATE_CORKSCREW_ROLL &amp;&amp; state != STATE_HANG &amp;&amp; state != STATE_CARRY)
    {
        y_speed = min(y_speed + y_acceleration, 16);
    }
    
    // Bonk the player's head on a ceiling:
    if (y_speed &lt; 0 &amp;&amp; player_collision_check(COL_TOP, MASK_BIG, x, y, angle))
    {
        y_speed = 0;
    }
}

// Revert spring state.
if (y_speed &gt; 0 &amp;&amp; state == STATE_SPRING)
{
    if (animation_index == "SPRING" || (animation_index == "CORKSCREW" &amp;&amp; animation_finished))
    {
        state           = STATE_DEFAULT;
        animation_index = "WALK";
    }
}
</argument>
      </arguments>
    </action>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">/// States.

// Exit in the following states:
if (state == STATE_DEATH) exit;

// NOTE: if you want to add a state that initiates while jumping, call its script before the jumping state script.
// Otherwise, the state will not execute.

// Character-specific states.
switch (character_id)
{
    // Classic Sonic:
    case CHAR_CLASSIC_SONIC:
    {
        player_state_shield();
        player_state_dropdash();
        if (!cpu_flag) player_state_peelout();
        break;
    }

    // Tails:
    case CHAR_TAILS:
    {
        player_state_fly();
        break;
    }

    // Knuckles:
    case CHAR_KNUCKLES:
    {
        player_state_glide();
        player_state_climb();
        player_state_slide();
        break;
    }

    // Amy:
    case CHAR_AMY:
    {
        player_state_hammer();
        break;
    }

    // Modern Sonic:
    case CHAR_MODERN_SONIC:
    {
        player_state_boost();
        if (!cpu_flag) player_state_homing();
        break;
    }
}

// Common states.
player_state_carry();
player_state_hang();
player_state_jump();
player_state_lookup();
player_state_crouch();
player_state_spindash();
player_state_roll();
player_state_brake();
player_state_push();
player_state_balance();
player_state_swap();
player_state_grind();
</argument>
      </arguments>
    </action>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">/// Invincibility &amp; Superspeed Timers.

// Exit in the following states:
if (state == STATE_DEATH) exit;

// Decrease invincibility timer.
if (invincibility_timer &gt; 0)
{
    invincibility_timer -= 1;
    if (invincibility_timer &lt;= 0)
    {
        invincibility_type  =  0;
        invincibility_timer = -1;

        // Stop invincibility jingle.
        if (audio_is_playing(SFX._jingle_invincibility) &amp;&amp; !cpu_flag)
        {
            audio_stop(SFX._jingle_invincibility);
        }
    }
}

// Start invincibility timer once we land after getting hit or respawning.
if (invincibility_type == 1 &amp;&amp; invincibility_timer == -1 &amp;&amp; state != STATE_HURT &amp;&amp; state != STATE_RESPAWN)
{
    invincibility_timer = 120;
}

// Hide shields when invincible.
if (shield_object != noone)
{
    if (invincibility_type != 2 &amp;&amp; !shield_object.visible)
    {
        shield_object.visible = true;
    }
    if (invincibility_type == 2 &amp;&amp; shield_object.visible)
    {
        shield_object.visible = false;
    }
}

// Create invincibility sparkles (credit to Tpot).
if (invincibility_type == 2 &amp;&amp; invincibility_timer mod 5 == 0)
{
    invincibility_angle = wrap_angle(invincibility_angle + 45);
    var xx, yy;
    xx = dcos(invincibility_angle) * 16;
    yy = dsin(invincibility_angle) * 16;
    create_effect(spr_invincibility_sparkle, random_range(0.4, 0.8), x + xx, y + yy - 6, -1, 0);
    create_effect(spr_invincibility_sparkle, random_range(0.4, 0.8), x - xx, y - yy - 6, -1, 0);
}

// Decrease superspeed timer.
if (superspeed_timer &gt; 0)
{
    superspeed_timer -= 1;
    if (superspeed_timer &lt;= 0)
    {
        superspeed_timer = 0;
        afterimage_draw  = false;
    }
}
</argument>
      </arguments>
    </action>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">/// Underwater handling.

// Reset the drown timer and stop the drown counter &amp; jingle if applicable:
if (state == STATE_DEATH || state == STATE_RESPAWN || instance_exists(obj_results) || shield_index == SHIELD_BUBBLE || !underwater)
{
    if (drown_timer &lt; 1800)
    {
        drown_timer = 1800;
    }
    if (instance_exists(drown_counter))
    {
        with (drown_counter) instance_destroy();
        drown_counter = noone;
    }
    if (audio_is_playing(SFX._jingle_drown) &amp;&amp; !cpu_flag)
    {
        audio_stop(SFX._jingle_drown);
    }
}
else
{
    // Decrease our drown timer.
    if (drown_timer &gt; 0) drown_timer -= 1;

    // Start the countdown timer and play the drowning jingle.
    if (drown_timer == 650)
    {
        if (instance_number(obj_water_alarm) &lt; 2)
        {
            drown_counter        = instance_create(x, y - 32, obj_water_alarm);
            drown_counter.parent = id;
        }
        if (!audio_is_playing(SFX._jingle_drown) &amp;&amp; !cpu_flag)
        {
            audio_play(SFX._jingle_drown, SFX.bgm_volume, 1, 0, 1);
        }
    }

    // Drown the player.
    if (drown_timer == 0)
    {
        drown_timer = 1800;
        state       = STATE_DEATH;
        has_drowned = true;
        if (audio_is_playing(SFX._jingle_drown) &amp;&amp; !cpu_flag)
        {
            audio_stop(SFX._jingle_drown);
        }
    }

    // Breathing state.
    if (state == STATE_BREATH)
    {
        if (!ground)
        {
            if (bubble_timer == 0)
            {
                x_speed = 0;
                y_speed = 0;
            }

            if (input_left || input_right)
            {
                x_speed += animation_direction * 0.025;
            }

            if (bubble_timer &lt; 20)
            {
                bubble_timer += 1;
            }
            else
            {
                bubble_timer    = 0;
                state           = STATE_DEFAULT;
                animation_index = "WALK";
            }
        }
        else
        {
            state = STATE_DEFAULT;
        }

        // Reset drown counter:
        drown_timer = 1800;
        if (instance_exists(drown_counter))
        {
            with (drown_counter) instance_destroy();
            drown_counter = noone;
        }
        if (audio_is_playing(SFX._jingle_drown) &amp;&amp; !cpu_flag)
        {
            audio_stop(SFX._jingle_drown);
        }
    }
    else
    {
        // Reset bubble timer.
        if (bubble_timer &gt; 0)
        {
            bubble_timer = 0;
        }
    }

    // Alarm sounds.
    if (!cpu_flag)
    {
        if (drown_timer mod 400 == 0)
        {
            if (!audio_is_playing(SFX._jingle_drown))
            {
                audio_play(SFX._general_alarm_count, SFX.sfx_volume, 1, 0, 0);
            }
        }
    }

    // Air bubbles.
    if (drown_timer mod 78 == 0 &amp;&amp; drown_timer &gt; 600)
    {
        var bubble;
        bubble              = instance_create(x + irandom_range(-7, 8), y - 6, obj_water_air_bubble);
        bubble.bubble_index = choose(0, 1, 2, 1, 3);
    }
}
</argument>
      </arguments>
    </action>
  </actions>
</event>
